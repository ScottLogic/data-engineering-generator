{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://scottlogic.com/datahelix.json",
  "title": "The Scott Logic DataHelix Profile Schema",
  "type": "object",
  "additionalProperties": false,
  "required": ["schemaVersion", "fields", "rules"],
  "properties": {
    "additionalProperties": false,
    "schemaVersion": {
      "$ref": "#/definitions/schemaVersion"
    },
    "description": {
      "title": "A description of what data the profile is modelling",
      "type": "string"
    },
    "fields": {
      "title": "Defines the fields that data will be produced for. field names must begin with an alphabetic character.",
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "additionalItems": false,
      "items": {
        "$ref": "#/definitions/fieldName"
      }
    },
    "rules": {
      "title": "The Rules defining the data to be output",
      "type": "array",
      "additionalItems": false,
      "items": {
        "title": "A set of Rule objects.",
        "type": "object",
        "additionalProperties": false,
        "required": ["constraints"],
        "properties": {
          "rule": {
            "title": "A collection of constraints. Test case generation revolves around rules, in that the generator will output a separate dataset for each rule, wherein each row violates the rule in a different way.",
            "type": "string"
          },
          "constraints": {
            "type": "array",
            "items": {"$ref": "#/definitions/constraint"}
          }
        }
      }
    }
  },
  "definitions": {
    "schemaVersion": {
      "title": "The version of the DataHelix profile schema",
      "type": "string",
      "default": "0.1",
      "pattern": "^[0-9]+[.][0-9]+$"
    },
    "datetime": {
      "type": "object",
      "additionalProperties": false,
      "required": ["date"],
      "properties": {
        "additionalProperties": false,
        "date": {
          "title": "an ISO 8610 compatible string denoting a date and time",
          "type": "string",
          "default": "2000-01-01T09:00:00.000",
          "pattern": "^(?!0000)[0-9]{4}-([0][0-9]|[1][0-2])-([0-2][0-9]|3[01])T([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9][.][0-9]{3}$"
        }
      }
    },
    "fieldName": {
      "title": "The name of a field to generate data for",
      "type": "object",
      "additionalProperties": false,
      "required": ["name"],
      "default": "field name",
      "properties": {
        "name": {"type": "string"}
      }
    },
    "constraint": {
      "oneOf": [
        {
          "$ref": "#/definitions/grammaticalConstraint"
        },
        {
          "$ref": "#/definitions/dataConstraint"
        }
      ]
    },
    "grammaticalConstraint": {
      "oneOf": [
        {
          "$ref": "#/definitions/notConstraint"
        },
        {
          "$ref": "#/definitions/anyOfConstraint"
        },
        {
          "$ref": "#/definitions/allOfConstraint"
        },
        {
          "$ref": "#/definitions/ifConstraint"
        }
      ]
    },
    "dataConstraint": {
      "type": "object",
      "required": ["field", "is"],
      "properties": {
        "field": {"type": "string"},
        "is": {
          "enum": [
            "ofType", "equalTo", "aValid", "inSet",
            "formattedAs", "matchingRegex", "containingRegex", "ofLength", "longerThan", "shorterThan",
            "null",
            "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "granularTo",
            "after", "afterOrAt", "before", "beforeOrAt"
          ]
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {"is": {"enum": ["after", "afterOrAt", "before", "beforeOrAt"]}}
          },
          "then": {
            "properties": {"value": {"$ref": "#/definitions/datetime"}}
          }
        },
        {
          "if": {
            "properties": {"is": {"const": "equalTo"}}
          },
          "then": {
            "properties": {"value": {}}
          }
        },
        {
          "if": {
            "properties": {"is": {"const": "ofType"}}
          },
          "then": {
            "properties": {"value": {"enum": ["numeric", "string", "datetime"]}}
          }
        },
        {
          "if": {
            "properties": {"is": {"const": "inSet"}}
          },
          "then": {
            "properties": {"values": {"type": "array"}}
          }
        },
        {
          "if": {
            "properties": {"is": {"const": "null"}}
          },
          "then": {
            "properties": {"not": {}}
          }
        },
        {
          "if": {
            "properties": {"is": {"const": "formattedAs"}}
          },
          "then": {
            "properties": {"value": {"pattern": "^%.+$"}}
          }
        },
        {
          "if": {
            "properties": {"is": {"enum": ["matchingRegex", "containingRegex"]}}
          },
          "then": {
            "properties": {"value": {"type": "string", "default": ".*"}}
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "enum": [
                  "shorterThan", "longerThan", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "granularTo"
                ]
              }
            }
          },
          "then": {
            "properties": {"value": {"type": "number"}}
          }
        },
        {
          "if": {
            "properties": {"is": {"const": "aValid"}}
          },
          "then": {
            "properties": {"value": {"const": "ISIN", "default": "ISIN"}}
          }
        }
      ]
    },
    "notConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": ["not"],
      "properties": {
        "not": {"$ref": "#/definitions/constraint"}
      }
    },
    "anyOfConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": ["anyOf"],
      "properties": {
        "anyOf": {
          "type": "array",
          "minItems": 2,
          "items": {
            "$ref": "#/definitions/constraint"
          }
        }
      }
    },
    "allOfConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": ["allOf"],
      "properties": {
        "allOf": {
          "type": "array",
          "minItems": 2,
          "items": {
            "$ref": "#/definitions/constraint"
          }
        }
      }
    },
    "ifConstraint": {
      "type": "object",
      "required": ["if", "then"],
      "properties": {
        "if": {
          "$ref": "#/definitions/constraint"
        },
        "then": {
          "$ref": "#/definitions/constraint"
        },
        "additionalProperties": {
          "else": {
            "$ref": "#/definitions/constraint"
          }
        }
      }
    }
  }
}