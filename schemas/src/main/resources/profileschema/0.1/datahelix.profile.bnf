profile ::= '{' schemaVersion ',' ( schemaDescription ',' )? fields ',' rules '}'

schemaVersion ::= '"' 'schemaVersion' '"' ':' '"' digit+ '.' digit+ '"'
schemaDescription ::= '"' 'description' '"' ':' string

fields ::= '"' 'fields' '"' ':' '[' ( '{' fieldName '}' ( ',' '{' fieldName '}' )*) ']'
fieldName ::= '"' 'name' '"' ':' string

rules ::='"' 'rules' '"' ':' '[' ( '{' rule '}' ( ',' '{' rule '}' )*)? ']'

rule ::= ( '"' 'rule' '"' ':' string ',' )? '"' 'constraints' '"'':' '[' (constraint ( ',' constraint )*)? ']'

constraint ::= epistemicConstraint | grammaticalConstraint | presentationalConstraint

grammaticalConstraint ::= not | anyOf | allOf | if

presentationalConstraint ::= '{' '"' 'field' '"' ':' string ',' '"' 'is' '"' ':' ( formattedAs ) '}'

epistemicConstraint ::= '{' '"' 'field' '"' ':' string ',' '"' 'is' '"' ':' ( ofType | equalTo | stringConstraint | numberConstraint | datetimeConstraint | inSet | '"' 'null' '"' ) '}'

not   ::= '{' '"' 'not' '"' ':' constraint '}'
anyOf ::= '{' '"' 'anyOf''"' ':' '[' (constraint ( ',' constraint )*) ']' '}'
allOf ::= '{' '"' 'allOf''"' ':' '[' (constraint ( ',' constraint )*) ']' '}'
if    ::= '{' '"' 'if' '"' ':' constraint ',' '"' 'then' '"' ':' constraint ( ',' '"' 'else' '"' ':' constraint )? '}'

ofType   ::= '"' 'ofType' '"' ',' '"' 'value' '"' ':' '"' ( 'numeric' | 'string' | 'datetime' ) '"'

formattedAs ::= '"' 'formattedAs' '"' ',' '"' 'value' '"' ':' stringFormatPattern

stringConstraint ::= ( '"' ( 'matchingRegex' | 'containingRegex' ) '"' ',' '"' 'value' '"' ':' string )
 | ( '"' ( 'ofLength' | 'longerThan' | 'shorterThan' ) '"' ',' '"' 'value' '"' ':' number )
 | '"' 'aValid' '"' ':' '"' 'ISIN' '"'
numberConstraint ::= '"' ( 'lessThan' | 'greaterThan' | 'lessThanOrEqualTo' | 'greaterThanOrEqualTo' | 'granularTo' ) '"' ',' '"' 'value' '"' ':' number
datetimeConstraint ::= '"' ( 'after' | 'afterOrAt' | 'before' | 'beforeOrAt' ) '"' ',' '"' 'value' '"' ':' datetime

inSet ::= '"' 'inSet' '"' ':' '[' ( ( datetime | string | number) ( ',' ( datetime | string | number) )*) ']'

equalTo ::= '"' 'equalTo' '"' ',' '"' 'value' '"' ':' ( number | string | datetime ) '}'

datetime         ::= '{' '"' 'date' '"' ':' '"' datetimeValue '"' '}'
datetimeValue    ::=datetimeYear'-'datetimeMonth '-'datetimeDay 'T' datetimeHour ':' datetimeMinute ':' datetimeSecond '.' datetimeMillisec
datetimeYear     ::= '0' '0' '0' [1-9] | '0' '0' [1-9] digit | '0' [1-9] digit digit | [1-9] digit digit digit
datetimeMonth    ::= '0' [1-9] | '1' [0-2]
datetimeDay      ::= '0' [1-9] | [1-2] digit | '3' [0-1]
datetimeHour     ::= '0' [1-9] | '1' digit | '2' [0-3]
datetimeMinute   ::= [0-5] digit
datetimeSecond   ::= [0-5] digit
datetimeMillisec ::= digit digit digit

string              ::= '"' character* '"'
stringFormatPattern ::= '"' '%' character+ '"'

character     ::= unescapedChar | escapedChar
unescapedChar ::= [#x0020-#x0021#x0023-#x005B#x005D-#x10FFFF]
escapedChar   ::= '\' ( [#x0022#x005C#x002F#x0008#x000C#x000A#x000D#x0009] | 'u' hexDigit hexDigit hexDigit hexDigit )

hexDigit   ::= digit | [A-Fa-f]
number     ::= '-'? ( '0' | [1-9] digit* ) ( '.' digit+ )? ( ( 'e' | 'E' ) ( '+' | '-' )? digit+ )?
digit      ::= [0-9]