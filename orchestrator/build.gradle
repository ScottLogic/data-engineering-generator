plugins {
    id 'java'
    id 'de.gliderpilot.semantic-release' version '1.4.0'
}

group 'com.scottlogic.deg'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile project(':profile')
    compile project(':generator')
    compile project(':output')
    compile project(':common')

    compile group: 'info.picocli', name: 'picocli', version: '4.0.0-alpha-3'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testCompile 'org.junit.platform:junit-platform-runner:1.3.1'
    testCompile 'org.junit.vintage:junit-vintage-engine:5.3.1'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testCompile 'io.cucumber:cucumber-core:4.0.0'
    testCompile 'io.cucumber:cucumber-junit:4.0.0'
    testCompile 'io.cucumber:cucumber-java:4.0.0'
    testCompile 'io.cucumber:cucumber-jvm:4.0.0'
    testCompile 'io.cucumber:gherkin:5.0.0'
    testCompile 'io.cucumber:cucumber-expressions:6.0.1'
    testCompile 'info.cukes:cucumber-picocontainer:1.2.5'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.shazam:shazamcrest:0.11'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    
    testCompile project(':generator').sourceSets.test.output

    testImplementation('org.junit.jupiter:junit-jupiter:5.4.2')
}

test {
    useJUnitPlatform()
    dependsOn("fatJar")
}

description = 'DataHelix Generator'

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.scottlogic.deg.orchestrator.App'
    }
    baseName = 'generator'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    archiveName = "${baseName}.${extension}"
}

jar {
    manifest {
        attributes 'Main-Class': 'com.scottlogic.deg.orchestrator.App'
    }
}

project.ext.ghToken = project.hasProperty('ghToken') ? project.getProperty('ghToken') : System.getenv('GH_TOKEN') ?: null
semanticRelease {
    repo {
        ghToken = project.ghToken
    }
}

semanticRelease {
    repo {
        releaseAsset fatJar
    }
}



