{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://scottlogic.com/datahelix.json",
  "definitions": {
    "schemaVersion": {
      "type": "string",
      "title": "The version of the DataHelix profile schema",
      "pattern": "^[0-9]+.[0-9]+$"
    },
    "temporal": {
      "type": "object",
      "properties": {
        "additionalProperties": false,
        "date": {
          "type": "string",
          "pattern": "^[0-9]{4}-[0-1][0-9]-([0-2][0-9]|3[01])T([0-1][0-9]|2[03]):[0-5][0-9]:[0-5][0-9].[0-9]{3}$"
        }
      }
    },
    "ofTypeValue": {
      "type": "object",
      "properties": {
        "additionalProperties": false,
        "value": {
          "type": "string",
          "enum": [
            "integer",
            "decimal",
            "string",
            "temporal"
          ]
        }
      }
    },
    "fieldNameFormat": {
      "type": "string",
      "title": "The name fo a field to generate data for",
      "pattern": "^([a-zA-Z][a-zA-Z0-9_\\s]*)$"
    },
    "grammaticalConstraint": {
      "oneOf": [
        {
          "$ref": "#/definitions/notConstraint"
        },
        {
          "$ref": "#/definitions/anyOfConstraint"
        },
        {
          "$ref": "#/definitions/allOfConstraint"
        },
        {
          "$ref": "#/definitions/ifConstraint"
        }
      ]
    },
    "presentationalConstraint": {
      "oneOf": [
        {
          "$ref": "#/definitions/formattedAs"
        }
      ]
    },
    "epistemicConstraint": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "field": {
          "$ref": "#/definitions/fieldNameFormat"
        },
        "is": {
          "oneOf": [
            {
              "$ref": "#/definitions/anyOfConstraint"
            },
            {
              "$ref": "#/definitions/notConstraint"
            },
            {
              "$ref": "#/definitions/allOfConstraint"
            },
            {
              "$ref": "#/definitions/ifConstraint"
            },
            {
              "$ref": "#/definitions/epistemicConstraint"
            }
          ]
        }
      }
    },
    "constraint": {
      "oneOf": [
        {
          "$ref": "#/definitions/grammaticalConstraint"
        },
        {
          "$ref": "#/definitions/presentationalConstraint"
        },
        {
          "$ref": "#/definitions/epistemicConstraint"
        }
      ]
    },
    "formattedAs": {
      "type": "string",
      "pattern": "^%.+$"
    },
    "notConstraint": {
      "not": {"$ref": "#/definitions/constraint"}
    },
    "anyOfConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "anyOf"
      ],
      "properties": {
        "anyOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/constraint"
          }
        }
      }
    },
    "allOfConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "allOf"
      ],
      "properties": {
        "allOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/constraint"
          }
        }
      }
    },
    "ifConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "if",
        "then"
      ],
      "properties": {
        "if": {
          "type": "object"
        },
        "then": {
          "type": "object"
        }
      }
    }
  },
  "type": "object",
  "title": "The Scott Logic DataHelix Profile Schema",
  "required": [
    "schemaVersion",
    "fields",
    "rules"
  ],
  "properties": {
    "additionalProperties": false,
    "schemaVersion": {
      "$ref": "#/definitions/schemaVersion"
    },
    "description": {
      "type": "string",
      "title": "A description of what data the profile is modelling",
      "pattern": "^(.*)$"
    },
    "fields": {
      "type": "array",
      "minItems": 1,
      "additionalItems": false,
      "title": "Defines the fields that data will be produced for. field names must begin with an alphabetic character.",
      "items": {
        "type": "object",
        "title": "A set of Field objects",
        "required": [
          "name"
        ],
        "properties": {
          "additionalProperties": false,
          "name": {
            "$ref": "#/definitions/fieldNameFormat"
          }
        }
      }
    },
    "rules": {
      "type": "array",
      "minItems": 1,
      "additionalItems": false,
      "title": "The Rules defining the data to be output",
      "items": {
        "type": "object",
        "title": "A set of Rule objects.",
        "required": [
          "constraints"
        ],
        "properties": {
          "additionalProperties": false,
          "rule": {
            "type": "string",
            "title": "A named collection of constraints. Test case generation revolves around rules, in that the generator will output a separate dataset for each rule, wherein each row violates the rule in a different way.",
            "pattern": "^([a-zA-Z][A-Za-z0-9:@~;'#,.Â£$%&\"\\s]+[.?!]*)$"
          },
          "constraints": {
            "type": "array",
            "minItems": 1,
            "additionalItems": false,
            "title": "The constraints defining the enclosing rule.",
            "items": {
              "$ref": "#/definitions/constraint"
            }
          }
        }
      }
    }
  }
}